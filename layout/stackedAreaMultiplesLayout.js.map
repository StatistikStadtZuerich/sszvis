{"version":3,"file":"stackedAreaMultiplesLayout.js","sources":["../../src/layout/stackedAreaMultiplesLayout.js"],"sourcesContent":["/**\n * Stacked Area Multiples Layout\n *\n * This function is used to compute layout parameters for the area multiples chart.\n *\n * @module sszvis/layout/stackedAreaMultiplesLayout\n *\n * @param  {number} height      The available height of the chart\n * @param  {number} num         The number of individual stacks to display\n * @param  {number} pct         the planned-for ratio between the space allotted to each area and the amount of space + area.\n *                              This value is used to compute the baseline positions for the areas, and how much vertical space to leave\n *                              between the areas.\n *\n * @return {object}             An object containing configuration properties for use in laying out the stacked area multiples.\n *                              {\n *                                range:          This is an array of baseline positions, counting from the top of the stack downwards.\n *                                                It should be used to configure a d3.scaleOrdinal(). The values passed into the ordinal\n *                                                scale will be given a y-value which descends from the top of the stack, so that the resulting\n *                                                scale will match the organization scheme of sszvis.stackedArea. Use the ordinal scale to\n *                                                configure the sszvis.stackedAreaMultiples component.\n *                                bandHeight:     The height of each multiples band. This can be used to configure the within-area y-scale.\n *                                                This height represents the height of the y-axis of the individual area multiple.\n *                                padHeight:      This is the amount of vertical padding between each area multiple.\n *                              }\n */\n\nexport default function (height, num, pct) {\n  pct || (pct = 0.1);\n  const step = height / (num - pct),\n    bandHeight = step * (1 - pct),\n    range = [];\n  let level = bandHeight; // count from the top, and start at the bottom of the first band\n  while (level - height < 1) {\n    range.push(level);\n    level += step;\n  }\n  return {\n    range,\n    bandHeight,\n    padHeight: step * pct,\n  };\n}\n"],"names":["height","num","pct","step","bandHeight","range","level","push","padHeight"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qCAAUA,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAE;AACzCA,EAAAA,GAAG,KAAKA,GAAG,GAAG,GAAG,CAAC;AAClB,EAAA,MAAMC,IAAI,GAAGH,MAAM,IAAIC,GAAG,GAAGC,GAAG,CAAC;AAC/BE,IAAAA,UAAU,GAAGD,IAAI,IAAI,CAAC,GAAGD,GAAG,CAAC;AAC7BG,IAAAA,KAAK,GAAG,EAAE;AACZ,EAAA,IAAIC,KAAK,GAAGF,UAAU,CAAC;AACvB,EAAA,OAAOE,KAAK,GAAGN,MAAM,GAAG,CAAC,EAAE;AACzBK,IAAAA,KAAK,CAACE,IAAI,CAACD,KAAK,CAAC;AACjBA,IAAAA,KAAK,IAAIH,IAAI;AACf;EACA,OAAO;IACLE,KAAK;IACLD,UAAU;IACVI,SAAS,EAAEL,IAAI,GAAGD;GACnB;AACH;;;;"}