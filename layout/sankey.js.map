{"version":3,"file":"sankey.js","sources":["../../src/layout/sankey.js"],"sourcesContent":["/**\n * @module sszvis/layout/sankey\n *\n * A module of helper functions for computing the data structure\n * and layout required by the sankey component.\n */\n\nimport { ascending, descending, max, min, sum } from \"d3\";\n\nimport * as fn from \"../fn.js\";\nimport * as logger from \"../logger.js\";\n\nconst newLinkId = (function () {\n  let id = 0;\n  return function () {\n    return ++id;\n  };\n})();\n\n/**\n * sszvis.layout.sankey.prepareData\n *\n * Returns a data preparation component for the sankey data.\n *\n * Throughout the code, the rectangles representing entities are referred to as 'nodes', while\n * the chords connection them which represent flows among those entities are referred to as 'links'.\n *\n * @property {Array} apply                    Applies the preparation to a dataset of links. Expects a list of links, where the (unique) id\n *                                            of the source node can be accessed with the source function, and the (unique) id of the target\n *                                            can be accessed with the target function. Note that no source can have the same id as a target and\n *                                            vice versa. The nodes are defined implicitly by the fact that they have a link going to them or\n *                                            from them.\n * @property {Function} source                An accessor function for getting the source of a link\n * @property {Function} target                An accessor function for getting the target of a link\n * @property {Function} value                 An accessor function for getting the value of a link. Must be a number. The total value of a node\n *                                            is the greater of the sum of the values of its sourced links and its targeting links.\n * @property {} descendingSort                Toggles the use of a descending value sort for the nodes\n * @property {} ascendingSort                 Toggles the use of an ascending value sort for the nodes\n * @property {Array(Array)} idLists           An array of arrays of id values. For each array of ids, the sankey diagram will create a column\n *                                            of nodes. Each node should have links going to it or coming from it. All ids should be unique.\n *\n * @return {Function}                         The data preparation function. Can be called directly, or applied using the '.apply' function.\n *         When called, returns an object with data to be used in constructing the chart.\n *               @property {Array} nodes             An array of node data. Each one will become a rectangle in the sankey\n *               @property {Array} links             An array of link data. Each one will become a path in the sankey\n *               @property {Array} columnTotals      An array of column totals. Needed by the computeLayout function (and internally by the sankey component)\n *               @property {Array} columnLengths     An array of column lengths (number of nodes). Needed by the computeLayout function.\n */\nexport const prepareData = function () {\n  let mGetSource = fn.identity;\n  let mGetTarget = fn.identity;\n  let mGetValue = fn.identity;\n  let mColumnIds = [];\n\n  // Helper functions\n  const valueAcc = fn.prop(\"value\");\n  const byAscendingValue = function (a, b) {\n    return ascending(valueAcc(a), valueAcc(b));\n  };\n  const byDescendingValue = function (a, b) {\n    return descending(valueAcc(a), valueAcc(b));\n  };\n\n  let valueSortFunc = byDescendingValue;\n\n  const main = function (inputData) {\n    const columnIndex = mColumnIds.reduce((index, columnIdsList, colIndex) => {\n      for (const id of columnIdsList) {\n        if (index.has(id)) {\n          logger.warn(\n            \"Duplicate column member id passed to sszvis.layout.sankey.prepareData.column:\",\n            id,\n            \"The existing value will be overwritten\"\n          );\n        }\n\n        const item = {\n          id,\n          columnIndex: colIndex, // This is the index of the column containing this node\n          nodeIndex: 0, // This will be overwritten at a later stage with the index of this node within its column\n          value: 0,\n          valueOffset: 0,\n          linksFrom: [],\n          linksTo: [],\n        };\n\n        index.set(id, item);\n      }\n\n      return index;\n    }, new Map());\n\n    const listOfLinks = inputData.map((datum) => {\n      const srcId = mGetSource(datum);\n      const tgtId = mGetTarget(datum);\n      const value = +mGetValue(datum) || 0; // Cast this to number\n\n      const srcNode = columnIndex.get(srcId);\n      const tgtNode = columnIndex.get(tgtId);\n\n      if (!srcNode) {\n        logger.warn(\"Found invalid source column id:\", srcId);\n        return null;\n      }\n\n      if (!tgtNode) {\n        logger.warn(\"Found invalid target column id:\", tgtId);\n        return null;\n      }\n\n      const item = {\n        id: newLinkId(),\n        value,\n        src: srcNode,\n        srcOffset: 0,\n        tgt: tgtNode,\n        tgtOffset: 0,\n      };\n\n      srcNode.linksFrom.push(item);\n      tgtNode.linksTo.push(item);\n\n      return item;\n    });\n\n    // Extract the column nodes from the index\n    const listOfNodes = [...columnIndex.values()];\n\n    // Calculate an array of total values for each column\n    const columnTotals = listOfNodes.reduce(\n      (totals, node) => {\n        const fromTotal = sum(node.linksFrom, valueAcc);\n        const toTotal = sum(node.linksTo, valueAcc);\n\n        // For correct visual display, the node's value is the max of the from and to links\n        node.value = Math.max(0, fromTotal, toTotal);\n\n        totals[node.columnIndex] += node.value;\n\n        return totals;\n      },\n      fn.filledArray(mColumnIds.length, 0)\n    );\n\n    // An array with the number of nodes in each column\n    const columnLengths = mColumnIds.map((colIds) => colIds.length);\n\n    // Sort the column nodes\n    // (note, this sorts all nodes for all columns in the same array)\n    listOfNodes.sort(valueSortFunc);\n\n    // Sort the links in descending order of value. This means smaller links will render\n    // on top of larger links.\n    // (note, this sorts all links for all columns in the same array)\n    listOfLinks.sort(byDescendingValue);\n\n    // Assign the valueOffset and nodeIndex properties\n    // Here, columnData[0] is an array adding up value totals\n    // and columnData[1] is an array adding up the number of nodes in each column\n    // Both are used to assign cumulative properties to the nodes of each column\n    listOfNodes.reduce(\n      (columnData, node) => {\n        // Assigns valueOffset and nodeIndex\n        node.valueOffset = columnData[0][node.columnIndex];\n        node.nodeIndex = columnData[1][node.columnIndex];\n\n        columnData[0][node.columnIndex] += node.value;\n        columnData[1][node.columnIndex] += 1;\n\n        return columnData;\n      },\n      [fn.filledArray(mColumnIds.length, 0), fn.filledArray(mColumnIds.length, 0)]\n    );\n\n    // Once the order of nodes is calculated, we need to sort the links going into the\n    // nodes and the links coming out of the nodes according to the ordering of the nodes\n    // they come from or go to. This creates a visually appealing layout which minimizes\n    // the number of link crossings\n    for (const node of listOfNodes) {\n      node.linksFrom.sort((linkA, linkB) => linkA.tgt.nodeIndex - linkB.tgt.nodeIndex);\n\n      node.linksTo.sort((linkA, linkB) => linkA.src.nodeIndex - linkB.src.nodeIndex);\n\n      // Stack the links vertically within the node according to their order\n      node.linksFrom.reduce((sumValue, link) => {\n        link.srcOffset = sumValue;\n        return sumValue + valueAcc(link);\n      }, 0);\n\n      node.linksTo.reduce((sumValue, link) => {\n        link.tgtOffset = sumValue;\n        return sumValue + valueAcc(link);\n      }, 0);\n    }\n\n    return {\n      nodes: listOfNodes,\n      links: listOfLinks,\n      columnTotals,\n      columnLengths,\n    };\n  };\n\n  main.apply = function (data) {\n    return main(data);\n  };\n\n  main.source = function (func) {\n    mGetSource = func;\n    return main;\n  };\n\n  main.target = function (func) {\n    mGetTarget = func;\n    return main;\n  };\n\n  main.value = function (func) {\n    mGetValue = func;\n    return main;\n  };\n\n  main.descendingSort = function () {\n    valueSortFunc = byDescendingValue;\n    return main;\n  };\n\n  main.ascendingSort = function () {\n    valueSortFunc = byAscendingValue;\n    return main;\n  };\n\n  main.idLists = function (idLists) {\n    mColumnIds = idLists;\n    return main;\n  };\n\n  return main;\n};\n\n/**\n * sszvis.layout.sankey.computeLayout\n *\n * Automatically computes visual display properties needed by the sankey component,\n * including padding between each node, paddings for the tops of columns to vertically center\n * them, the domain and range of values in the nodes (used for scaling the node rectangles),\n * the node thickness, and the domain and range of the column positioning scale.\n *\n * @param  {Array} columnLengths      An array of lengths (number of nodes) of each column in the diagram.\n *                                    Used to compute optimal padding between nodes. Provided by the layout.sankey.prepareData function\n * @param  {Array} columnTotals       An array of column totals (total of all values of all ndoes). Provided by the\n * @param  {Number} columnHeight      The vertical height available for the columns. The tallest column will be this height. (Usually bounds.innerHeight)\n * @param  {Number} columnWidth       The width of all columns. The sankey chart will be this width. (Usually bounds.innerWidth)\n * @return {Object}                   An object of configuration parameters to be passed to the sankey component\n *         @property {Number} nodePadding         The amount of padding to add between nodes. pass to component.sankey.nodePadding\n *         @property {Array} columnPaddings       An array of padding values for each column. Index into this with the columnIndex and return to component.sankey.columnPadding\n *         @property {Array} valueDomain          The domain for the node size scale. Use to configure a linear scale for component.sankey.sizeScale\n *         @property {Array} valueRange           The range for the node size scale. Use to configure a linear scale for component.sankey.sizeScale\n *         @property {Number} nodeThickness       The thickness of nodes. Pass to component.sankey.nodeThickness\n *         @property {Array} columnDomain         The domain for the coumn position scale. use to configure a linear scale for component.sankey.columnPosition\n *         @property {Array} columnRange          The range for the coumn position scale. use to configure a linear scale for component.sankey.columnPosition\n */\nexport const computeLayout = function (columnLengths, columnTotals, columnHeight, columnWidth) {\n  // Calculate appropriate scale and padding values (in pixels)\n  const padSpaceRatio = 0.15;\n  const padMin = 12;\n  const padMax = 50;\n  const minDisplayPixels = 1; // Minimum number of pixels used for display area\n\n  // Compute the padding value (in pixels) for each column, then take the minimum value\n  const computedPixPadding = min(\n    columnLengths.map((colLength) => {\n      // Any given column's padding is := (1 / 4 of total extent) / (number of padding spaces)\n      const colPadding = (columnHeight * padSpaceRatio) / (colLength - 1);\n      // Limit by minimum and maximum pixel padding values\n      return Math.max(padMin, Math.min(padMax, colPadding));\n    })\n  );\n\n  // Given the computed padding value, compute each column's resulting \"pixels per unit\"\n  // This is the number of remaining pixels available to display the column's total units,\n  // after padding pixels have been subtracted. Then take the minimum value of that.\n  const pixPerUnit = min(\n    columnLengths.map((colLength, colIndex) => {\n      // The non-padding pixels must have at least minDisplayPixels\n      const nonPaddingPixels = Math.max(\n        minDisplayPixels,\n        columnHeight - (colLength - 1) * computedPixPadding\n      );\n      return nonPaddingPixels / columnTotals[colIndex];\n    })\n  );\n\n  // The padding between bars, in bar value units\n  const valuePadding = computedPixPadding / pixPerUnit;\n  // The padding between bars, in pixels\n  const nodePadding = computedPixPadding;\n\n  // The maximum total value of any column\n  const maxTotal = max(columnTotals);\n\n  // Compute y-padding required to vertically center each column (in pixels)\n  const paddedHeights = columnLengths.map(\n    (colLength, colIndex) => columnTotals[colIndex] * pixPerUnit + (colLength - 1) * nodePadding\n  );\n  const maxPaddedHeight = max(paddedHeights);\n  const columnPaddings = columnLengths.map(\n    (colLength, colIndex) => (maxPaddedHeight - paddedHeights[colIndex]) / 2\n  );\n\n  // The domain of the size scale\n  const valueDomain = [0, maxTotal];\n  // The range of the size scale\n  const valueRange = [0, maxTotal * pixPerUnit];\n\n  // Calculate column (or row, as the case may be) positioning values\n  const nodeThickness = 20;\n  const numColumns = columnLengths.length;\n  const columnXMultiplier = (columnWidth - nodeThickness) / (numColumns - 1);\n  const columnDomain = [0, 1];\n  const columnRange = [0, columnXMultiplier];\n\n  return {\n    valuePadding,\n    nodePadding,\n    columnPaddings,\n    valueDomain,\n    valueRange,\n    nodeThickness,\n    columnDomain,\n    columnRange,\n  };\n};\n"],"names":["newLinkId","id","prepareData","mGetSource","fn","mGetTarget","mGetValue","mColumnIds","valueAcc","byAscendingValue","a","b","ascending","byDescendingValue","descending","valueSortFunc","main","inputData","columnIndex","reduce","index","columnIdsList","colIndex","has","logger","item","nodeIndex","value","valueOffset","linksFrom","linksTo","set","Map","listOfLinks","map","datum","srcId","tgtId","srcNode","get","tgtNode","src","srcOffset","tgt","tgtOffset","push","listOfNodes","values","columnTotals","totals","node","fromTotal","sum","toTotal","Math","max","length","columnLengths","colIds","sort","columnData","linkA","linkB","sumValue","link","nodes","links","apply","data","source","func","target","descendingSort","ascendingSort","idLists","computeLayout","columnHeight","columnWidth","padSpaceRatio","padMin","padMax","minDisplayPixels","computedPixPadding","min","colLength","colPadding","pixPerUnit","nonPaddingPixels","valuePadding","nodePadding","maxTotal","paddedHeights","maxPaddedHeight","columnPaddings","valueDomain","valueRange","nodeThickness","numColumns","columnXMultiplier","columnDomain","columnRange"],"mappings":"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"}