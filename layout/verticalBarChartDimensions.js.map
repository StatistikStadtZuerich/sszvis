{"version":3,"file":"verticalBarChartDimensions.js","sources":["../../src/layout/verticalBarChartDimensions.js"],"sourcesContent":["/**\n * Vertical Bar Chart Dimensions\n *\n * Generates a dimension configuration object to be used for laying out the vertical bar chart.\n *\n * @module sszvis/layout/verticalBarChartDimensions\n *\n * @param  {number} width         the total width available to the horizontal bar chart. The computed chart layout is not guaranteed\n *                                to fit inside this width.\n * @param  {number} numBars       The number of bars in the bar chart.\n * @return {object}               An object containing configuration properties for use in laying out the vertical bar chart.\n *                                {\n *                                  barWidth:             the width of each bar in the bar chart\n *                                  padWidth:             the width of the padding between the bars in the bar chart\n *                                  padRatio:             the ratio between the padding and the step (barWidth + padding). This can be passed\n *                                                        as the second parameter to d3.scaleOrdinal().rangeBands().\n *                                  outerRatio:           the outer ratio between the outer padding and the step. This can be passed as the\n *                                                        third parameter to d3.scaleOrdinal().rangeBands().\n *                                  barGroupWidth:        the width of all the bars plus all the padding between the bars.\n *                                  totalWidth:           The total width of all bars, plus all inner and outer padding.\n *                                }\n */\n\nexport default function (width, numBars) {\n  const MAX_BAR_WIDTH = 48, // the maximum width of a bar\n    MIN_PADDING = 2, // the minimum padding value\n    MAX_PADDING = 100, // the maximum padding value\n    TARGET_BAR_RATIO = 0.7, // the ratio of width to width + padding used to compute the initial width and padding\n    TARGET_PADDING_RATIO = 1 - TARGET_BAR_RATIO, // the inverse of the bar ratio, this is the ratio of padding to width + padding\n    numPads = numBars - 1; // the number of padding spaces\n  // compute the target size of the padding\n  // the derivation of this equation is available upon request\n  let padding =\n    (width * TARGET_PADDING_RATIO) / (TARGET_PADDING_RATIO * numPads + TARGET_BAR_RATIO * numBars);\n  // based on the computed padding, calculate the bar width\n\n  let barWidth = (width - padding * numPads) / numBars;\n\n  // adjust for min and max bounds\n  if (barWidth > MAX_BAR_WIDTH) {\n    barWidth = MAX_BAR_WIDTH;\n    // recompute the padding value where necessary\n    padding = (width - barWidth * numBars) / numPads;\n  }\n  if (padding < MIN_PADDING) padding = MIN_PADDING;\n  if (padding > MAX_PADDING) padding = MAX_PADDING;\n\n  // compute other information\n  const padRatio = 1 - barWidth / (barWidth + padding),\n    computedBarSpace = barWidth * numBars + padding * numPads,\n    outerRatio = (width - computedBarSpace) / 2 / (barWidth + padding);\n\n  return {\n    barWidth,\n    padWidth: padding,\n    padRatio,\n    outerRatio,\n    barGroupWidth: computedBarSpace,\n    totalWidth: width,\n  };\n}\n"],"names":["width","numBars","MAX_BAR_WIDTH","MIN_PADDING","MAX_PADDING","TARGET_BAR_RATIO","TARGET_PADDING_RATIO","numPads","padding","barWidth","padRatio","computedBarSpace","outerRatio","padWidth","barGroupWidth","totalWidth"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,mCAAA,EAAUA,KAAK,EAAEC,OAAO,EAAE;EACvC,MAAMC,aAAa,GAAG,EAAE;AAAE;AACxBC,IAAAA,WAAW,GAAG,CAAC;AAAE;AACjBC,IAAAA,WAAW,GAAG,GAAG;AAAE;AACnBC,IAAAA,gBAAgB,GAAG,GAAG;AAAE;IACxBC,oBAAoB,GAAG,CAAC,GAAGD,gBAAgB;AAAE;AAC7CE,IAAAA,OAAO,GAAGN,OAAO,GAAG,CAAC,CAAC;AACxB;AACA;AACA,EAAA,IAAIO,OAAO,GACRR,KAAK,GAAGM,oBAAoB,IAAKA,oBAAoB,GAAGC,OAAO,GAAGF,gBAAgB,GAAGJ,OAAO,CAAC;AAChG;;EAEA,IAAIQ,QAAQ,GAAG,CAACT,KAAK,GAAGQ,OAAO,GAAGD,OAAO,IAAIN,OAAO;;AAEpD;EACA,IAAIQ,QAAQ,GAAGP,aAAa,EAAE;AAC5BO,IAAAA,QAAQ,GAAGP,aAAa;AACxB;IACAM,OAAO,GAAG,CAACR,KAAK,GAAGS,QAAQ,GAAGR,OAAO,IAAIM,OAAO;AAClD,EAAA;AACA,EAAA,IAAIC,OAAO,GAAGL,WAAW,EAAEK,OAAO,GAAGL,WAAW;AAChD,EAAA,IAAIK,OAAO,GAAGJ,WAAW,EAAEI,OAAO,GAAGJ,WAAW;;AAEhD;EACA,MAAMM,QAAQ,GAAG,CAAC,GAAGD,QAAQ,IAAIA,QAAQ,GAAGD,OAAO,CAAC;AAClDG,IAAAA,gBAAgB,GAAGF,QAAQ,GAAGR,OAAO,GAAGO,OAAO,GAAGD,OAAO;IACzDK,UAAU,GAAG,CAACZ,KAAK,GAAGW,gBAAgB,IAAI,CAAC,IAAIF,QAAQ,GAAGD,OAAO,CAAC;EAEpE,OAAO;IACLC,QAAQ;AACRI,IAAAA,QAAQ,EAAEL,OAAO;IACjBE,QAAQ;IACRE,UAAU;AACVE,IAAAA,aAAa,EAAEH,gBAAgB;AAC/BI,IAAAA,UAAU,EAAEf;GACb;AACH;;;;"}