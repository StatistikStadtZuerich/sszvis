{"version":3,"file":"populationPyramidLayout.js","sources":["../../src/layout/populationPyramidLayout.js"],"sourcesContent":["/**\n * Population Pyramid Layout\n *\n * This function is used to compute the layout parameters for the population pyramid\n *\n * @module sszvis/layout/populationPyramidLayout\n *\n * @parameter {number} spaceWidth      The available width for the chart. This is used as a base for calculating the size of the chart\n *                                    (there's a default aspect ratio for its height), and then for calculating the rounded bar heights.\n *                                    The returned total height should be nicely proportionate to this value.\n * @parameter {number} numBars         The number of bars in the population pyramid. In other words, the number of ages or age groups in the dataset.\n *\n * @return {object}                   An object containing configuration information for the population pyramid:\n *                                    {\n *                                      barHeight: the height of one bar in the population pyramid\n *                                      padding: the height of the padding between bars in the pyramid\n *                                      totalHeight: the total height of all bars plus the padding between them. This should be the basis for the bounds calculation\n *                                      positions: an array of positions, which go from the bottom of the chart (lowest age) to the top. These positions should\n *                                      be set as the range of a d3.scaleOrdinal scale, where the domain is the list of ages or age groups that will be displayed\n *                                      in the chart. The domain ages or age groups should be sorted in ascending order, so that the positions will match up. If everything\n *                                      has gone well, the positions array's length will be numBars,\n *                                      maxBarLength: The maximum length of the bars to fit within the space while keeping a good aspect ratio.\n *                                      In situations with very wide screens, this limits the width of the entire pyramid to a reasonable size.\n *                                      chartPadding: left padding for the chart. When the maxBarLength is less than what would fill the entire width\n *                                      of the chart, this value is needed to offset the axes and legend so that they line up with the chart. Otherwise,\n *                                      the value is 0 and no padding is needed.\n *                                    }\n */\n\nimport { aspectRatioPortrait } from \"../aspectRatio.js\";\n\nexport default function (spaceWidth, numBars) {\n  const MAX_HEIGHT = 480; // Chart no taller than this\n  const MIN_BAR_HEIGHT = 2; // Bars no shorter than this\n  const defaultHeight = Math.min(aspectRatioPortrait(spaceWidth), MAX_HEIGHT);\n  const padding = 1;\n  const numPads = numBars - 1;\n  const totalPadding = padding * numPads;\n\n  let roundedBarHeight = Math.round((defaultHeight - totalPadding) / numBars);\n  roundedBarHeight = Math.max(roundedBarHeight, MIN_BAR_HEIGHT);\n\n  const totalHeight = numBars * roundedBarHeight + totalPadding;\n\n  let barPos = totalHeight - roundedBarHeight;\n  const step = roundedBarHeight + padding,\n    positions = [];\n  while (barPos >= 0) {\n    positions.push(barPos);\n    barPos -= step;\n  }\n\n  const maxBarLength = Math.min(spaceWidth / 2, (aspectRatioPortrait.MAX_HEIGHT * (4 / 5)) / 2);\n  const chartPadding = Math.max((spaceWidth - 2 * maxBarLength) / 2, 1);\n\n  return {\n    barHeight: roundedBarHeight,\n    padding,\n    totalHeight,\n    positions,\n    maxBarLength,\n    chartPadding,\n  };\n}\n"],"names":["spaceWidth","numBars","MAX_HEIGHT","MIN_BAR_HEIGHT","defaultHeight","Math","min","aspectRatioPortrait","padding","numPads","totalPadding","roundedBarHeight","round","max","totalHeight","barPos","step","positions","push","maxBarLength","chartPadding","barHeight"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIe,gCAAUA,EAAAA,UAAU,EAAEC,OAAO,EAAE;AAC5C,EAAA,MAAMC,UAAU,GAAG,GAAG,CAAC;AACvB,EAAA,MAAMC,cAAc,GAAG,CAAC,CAAC;AACzB,EAAA,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACC,mBAAmB,CAACP,UAAU,CAAC,EAAEE,UAAU,CAAC;EAC3E,MAAMM,OAAO,GAAG,CAAC;AACjB,EAAA,MAAMC,OAAO,GAAGR,OAAO,GAAG,CAAC;AAC3B,EAAA,MAAMS,YAAY,GAAGF,OAAO,GAAGC,OAAO;AAEtC,EAAA,IAAIE,gBAAgB,GAAGN,IAAI,CAACO,KAAK,CAAC,CAACR,aAAa,GAAGM,YAAY,IAAIT,OAAO,CAAC;EAC3EU,gBAAgB,GAAGN,IAAI,CAACQ,GAAG,CAACF,gBAAgB,EAAER,cAAc,CAAC;AAE7D,EAAA,MAAMW,WAAW,GAAGb,OAAO,GAAGU,gBAAgB,GAAGD,YAAY;AAE7D,EAAA,IAAIK,MAAM,GAAGD,WAAW,GAAGH,gBAAgB;AAC3C,EAAA,MAAMK,IAAI,GAAGL,gBAAgB,GAAGH,OAAO;AACrCS,IAAAA,SAAS,GAAG,EAAE;EAChB,OAAOF,MAAM,IAAI,CAAC,EAAE;AAClBE,IAAAA,SAAS,CAACC,IAAI,CAACH,MAAM,CAAC;AACtBA,IAAAA,MAAM,IAAIC,IAAI;AAChB;EAEA,MAAMG,YAAY,GAAGd,IAAI,CAACC,GAAG,CAACN,UAAU,GAAG,CAAC,EAAGO,mBAAmB,CAACL,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,CAAC;AAC7F,EAAA,MAAMkB,YAAY,GAAGf,IAAI,CAACQ,GAAG,CAAC,CAACb,UAAU,GAAG,CAAC,GAAGmB,YAAY,IAAI,CAAC,EAAE,CAAC,CAAC;EAErE,OAAO;AACLE,IAAAA,SAAS,EAAEV,gBAAgB;IAC3BH,OAAO;IACPM,WAAW;IACXG,SAAS;IACTE,YAAY;AACZC,IAAAA;GACD;AACH;;;;"}