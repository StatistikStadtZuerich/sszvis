{"version":3,"file":"textWrap.js","sources":["../../src/svgUtils/textWrap.js"],"sourcesContent":["/**\n * Text wrap\n *\n * Function allowing to 'wrap' the text from an SVG <text> element with <tspan>.\n *\n * @module sszvis/svgUtils/textWrap\n *\n * Based on https://github.com/mbostock/d3/issues/1642\n * @example svg.append(\"g\")\n *      .attr(\"class\", \"x axis\")\n *      .attr(\"transform\", \"translate(0,\" + height + \")\")\n *      .call(xAxis)\n *      .selectAll(\".tick text\")\n *          .call(d3TextWrap, x.rangeBand());\n *\n * @param text d3 selection for one or more <text> object\n * @param width number - global width in which the text will be word-wrapped.\n * @param paddingRightLeft integer - Padding right and left between the wrapped text and the 'invisible bax' of 'width' width\n * @param paddingTopBottom integer - Padding top and bottom between the wrapped text and the 'invisible bax' of 'width' width\n * @returns Array[number] - Number of lines created by the function, stored in a Array in case multiple <text> element are passed to the function\n */\n\nimport { select } from \"d3\";\n\nexport default function (selection, width, paddingRightLeft, paddingTopBottom) {\n  paddingRightLeft = paddingRightLeft || 5; //Default padding (5px)\n  paddingTopBottom = (paddingTopBottom || 5) - 2; //Default padding (5px), remove 2 pixels because of the borders\n  const maxWidth = width; //I store the tooltip max width\n  width = width - paddingRightLeft * 2; //Take the padding into account\n\n  const arrLineCreatedCount = [];\n  selection.each(function () {\n    const text = select(this);\n    const words = text\n      .text()\n      .split(/[\\t\\n\\v\\f\\r ]+/)\n      .reverse(); //Don't cut non-breaking space (\\xA0), as well as the Unicode characters \\u00A0 \\u2028 \\u2029)\n    let word;\n    let line = [];\n    let lineNumber = 0;\n    const lineHeight = 1.1; //Em\n    let x;\n    let y = text.attr(\"y\");\n    let dy = Number.parseFloat(text.attr(\"dy\"));\n    let createdLineCount = 1; //Total line created count\n    const textAlign = text.style(\"text-anchor\") || \"start\"; //'start' by default (start, middle, end, inherit)\n\n    //Clean the data in case <text> does not define those values\n    if (isNaN(dy)) dy = 0; //Default padding (0em) : the 'dy' attribute on the first <tspan> _must_ be identical to the 'dy' specified on the <text> element, or start at '0em' if undefined\n\n    //Offset the text position based on the text-anchor\n    const wrapTickLabels = select(text.node().parentNode).classed(\"tick\"); //Don't wrap the 'normal untranslated' <text> element and the translated <g class='tick'><text></text></g> elements the same way..\n    if (wrapTickLabels) {\n      switch (textAlign) {\n        case \"start\": {\n          x = -width / 2;\n          break;\n        }\n        case \"middle\": {\n          x = 0;\n          break;\n        }\n        case \"end\": {\n          x = width / 2;\n          break;\n        }\n        default:\n      }\n    } else {\n      //untranslated <text> elements\n      switch (textAlign) {\n        case \"start\": {\n          x = paddingRightLeft;\n          break;\n        }\n        case \"middle\": {\n          x = maxWidth / 2;\n          break;\n        }\n        case \"end\": {\n          x = maxWidth - paddingRightLeft;\n          break;\n        }\n        default:\n      }\n    }\n    y = +(null === y ? paddingTopBottom : y);\n\n    let tspan = text\n      .text(null)\n      .append(\"tspan\")\n      .attr(\"x\", x)\n      .attr(\"y\", y)\n      .attr(\"dy\", dy + \"em\");\n\n    while (words.length > 0) {\n      word = words.pop();\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width && line.length > 1) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text\n          .append(\"tspan\")\n          .attr(\"x\", x)\n          .attr(\"y\", y)\n          .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n          .text(word);\n        ++createdLineCount;\n      }\n    }\n\n    arrLineCreatedCount.push(createdLineCount); //Store the line count in the array\n  });\n  return arrLineCreatedCount;\n}\n"],"names":["selection","width","paddingRightLeft","paddingTopBottom","maxWidth","arrLineCreatedCount","each","text","select","words","split","reverse","word","line","lineNumber","lineHeight","x","y","attr","dy","Number","parseFloat","createdLineCount","textAlign","style","isNaN","wrapTickLabels","node","parentNode","classed","tspan","append","length","pop","push","join","getComputedTextLength"],"mappings":"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"}