{"version":3,"file":"aspectRatio.js","sources":["../src/aspectRatio.js"],"sourcesContent":["/**\n * Functions related to aspect ratio calculations. An \"auto\" function is\n * provided and should be used in most cases to find the recommended\n * aspect ratio.\n *\n * @module sszvis/aspectRatio\n */\n\nimport { breakpointDefaultSpec, breakpointFind } from \"./breakpoint.js\";\n\n/**\n * aspectRatio\n *\n * The base module is a function which creates an aspect ratio function.\n * You provide a width and a height of the aspect ratio, and the\n * returned function accepts any width, returning the corresponding\n * height for the aspect ratio you configured.\n *\n * @param {Number} x  The number of parts on the horizontal axis (dividend)\n * @param {Number} y  The number of parts on the vertical axis (divisor)\n * @return {Function} The aspect ratio function. Takes a width as an argument\n *                    and returns the corresponding height based on the\n *                    aspect ratio defined by x:y.\n */\nexport function aspectRatio(x, y) {\n  const ar = x / y;\n  return (width) => width / ar;\n}\n\n/**\n * aspectRatio4to3\n *\n * Recommended breakpoints:\n *   - palm\n *\n * @param {Number} width\n * @returns {Number} height\n */\nexport const aspectRatio4to3 = aspectRatio(4, 3);\n\n/**\n * aspectRatio16to10\n *\n * Recommended breakpoints:\n *   - lap\n *\n * @param {Number} width\n * @returns {Number} height\n */\nexport const aspectRatio16to10 = aspectRatio(16, 10);\n\n/**\n * aspectRatio12to5\n *\n * Recommended breakpoints:\n *   - desk\n *\n * @param {Number} width\n * @returns {Number} height\n */\nconst AR12TO5_MAX_HEIGHT = 500;\nexport const aspectRatio12to5 = (width) => Math.min(aspectRatio(12, 5)(width), AR12TO5_MAX_HEIGHT);\naspectRatio12to5.MAX_HEIGHT = AR12TO5_MAX_HEIGHT;\n\n/**\n * aspectRatioSquare\n *\n * This aspect ratio constrains the returned height to a maximum of 420px.\n * It is recommended to center charts within this aspect ratio.\n *\n * Exposes the MAX_HEIGHT used as a property on the function.\n *\n * Recommended breakpoints:\n *   - palm\n *   - lap\n *   - desk\n *\n * @param {Number} width\n * @returns {Number} height\n */\nconst SQUARE_MAX_HEIGHT = 420;\nexport const aspectRatioSquare = (width) => Math.min(aspectRatio(1, 1)(width), SQUARE_MAX_HEIGHT);\naspectRatioSquare.MAX_HEIGHT = SQUARE_MAX_HEIGHT;\n\n/**\n * aspectRatioPortrait\n *\n * This aspect ratio constrains the returned height to a maximum of 600px.\n * It is recommended to center charts within this aspect ratio.\n *\n * Exposes the MAX_HEIGHT used as a property on the function.\n *\n * Recommended breakpoints:\n *   - palm\n *   - lap\n *   - desk\n *\n * @param {Number} width\n * @returns {Number} height\n */\nconst PORTRAIT_MAX_HEIGHT = 600;\nexport const aspectRatioPortrait = (width) =>\n  Math.min(aspectRatio(4, 5)(width), PORTRAIT_MAX_HEIGHT);\naspectRatioPortrait.MAX_HEIGHT = PORTRAIT_MAX_HEIGHT;\n\n/**\n * aspectRatioAuto\n *\n * Provides a set of default aspect ratios for different widths. If you provide a set\n * of measurements for a container and the window itself, it will provide the default\n * value of the height for that container. Note that the aspect ratio chosen may\n * depend on the container width itself. This is because of default breakpoints.\n *\n * @param  {Measurement} measurement The measurements object for the container for which you\n *                                   want a height value. Should have at least the properties:\n *                                     - `width`: container's width\n *                                     - `screenHeight`: the height of the window at the current time.\n *\n * @return {Number} The height which corresponds to the default aspect ratio for these measurements\n */\nconst defaultAspectRatios = {\n  palm: aspectRatio4to3, // palm-sized devices\n  lap: aspectRatio16to10, // lap-sized devices\n  _: aspectRatio12to5, // all other cases, including desk\n};\n\nexport const aspectRatioAuto = (measurement) => {\n  const bp = breakpointFind(breakpointDefaultSpec(), measurement);\n  const ar = defaultAspectRatios[bp.name];\n  return ar(measurement.width);\n};\n"],"names":["aspectRatio","x","y","ar","width","aspectRatio4to3","aspectRatio16to10","AR12TO5_MAX_HEIGHT","aspectRatio12to5","Math","min","MAX_HEIGHT","SQUARE_MAX_HEIGHT","aspectRatioSquare","PORTRAIT_MAX_HEIGHT","aspectRatioPortrait","defaultAspectRatios","palm","lap","_","aspectRatioAuto","measurement","bp","breakpointFind","breakpointDefaultSpec","name"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAE;AAChC,EAAA,MAAMC,EAAE,GAAGF,CAAC,GAAGC,CAAC;AAChB,EAAA,OAAQE,KAAK,IAAKA,KAAK,GAAGD,EAAE;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAME,eAAe,GAAGL,WAAW,CAAC,CAAC,EAAE,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMM,iBAAiB,GAAGN,WAAW,CAAC,EAAE,EAAE,EAAE;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,kBAAkB,GAAG,GAAG;AACvB,MAAMC,gBAAgB,GAAIJ,KAAK,IAAKK,IAAI,CAACC,GAAG,CAACV,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC,CAACI,KAAK,CAAC,EAAEG,kBAAkB;AACjGC,gBAAgB,CAACG,UAAU,GAAGJ,kBAAkB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,iBAAiB,GAAG,GAAG;AACtB,MAAMC,iBAAiB,GAAIT,KAAK,IAAKK,IAAI,CAACC,GAAG,CAACV,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAACI,KAAK,CAAC,EAAEQ,iBAAiB;AAChGC,iBAAiB,CAACF,UAAU,GAAGC,iBAAiB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,GAAG,GAAG;AACxB,MAAMC,mBAAmB,GAAIX,KAAK,IACvCK,IAAI,CAACC,GAAG,CAACV,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAACI,KAAK,CAAC,EAAEU,mBAAmB;AACxDC,mBAAmB,CAACJ,UAAU,GAAGG,mBAAmB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,GAAG;AAC1BC,EAAAA,IAAI,EAAEZ,eAAe;AAAE;AACvBa,EAAAA,GAAG,EAAEZ,iBAAiB;AAAE;EACxBa,CAAC,EAAEX,gBAAgB;AACrB,CAAC;AAEM,MAAMY,eAAe,GAAIC,WAAW,IAAK;EAC9C,MAAMC,EAAE,GAAGC,cAAc,CAACC,qBAAqB,EAAE,EAAEH,WAAW,CAAC;AAC/D,EAAA,MAAMlB,EAAE,GAAGa,mBAAmB,CAACM,EAAE,CAACG,IAAI,CAAC;AACvC,EAAA,OAAOtB,EAAE,CAACkB,WAAW,CAACjB,KAAK,CAAC;AAC9B;;;;"}