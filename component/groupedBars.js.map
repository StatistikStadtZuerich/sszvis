{"version":3,"file":"groupedBars.js","sources":["../../src/component/groupedBars.js"],"sourcesContent":["/**\n * Grouped Bars component\n *\n * The grouped bars component is used to create grouped vertical bar charts.\n *\n * The input to the grouped bar component should be an array of arrays, where each inner\n * array contains the bars for a single group. Each of the inner arrays becomes a group, and\n * each element in those inner arrays becomes a bar.\n *\n * In addition to the raw data, the user must provide other information necessary for calculating\n * the layout of the groups of bars, namely the number of bars in each group (this component requires that\n * all groups have the same number of bars), a scale for finding the x-offset of each group (usually an\n * instance of d3.scaleOrdinal), a width for groups, and y- and height- scales for the bars in the group.\n * Note that the number of bars in each group and the group width determines how wide each bar will be, and\n * this width is calculated internally to the groupedBars component.\n *\n * The groups are calculated and laid out entirely by the groupedBars component.\n *\n * @module sszvis/component/groupedBars\n *\n * @property {scale} groupScale         This should be a scale function for determining the correct group offset of a member of a group.\n *                                      This function is passed the group member, and should return a value for the group offset which\n *                                      is the same for all members of the group. The within-group offset (which is different for each member)\n *                                      is then added to this group offset in order to position the bars individually within the group.\n *                                      So, for instance, if the groups are based on the \"city\" property, the groupScale should return\n *                                      the same value for all data objects with \"city = Zurich\".\n * @property {number} groupSize         This property tells groupedBars how many bars to expect for each group. It is used to assist in\n *                                      calculating the within-group layout and size of the bars. This number is treated as the same for all\n *                                      groups. Groups with less members than this number will have visible gaps. (Note that having less members\n *                                      in a group is not the same as having a member with a missing value, which will be discussed later)\n * @property {number} groupWidth        The width of the groups. This value is treated as the same for all groups. The width available to the groups\n *                                      is divided up among the bars. Often, this value will be the result of calling .rangeBand() on a d3.scaleOrdinal scale.\n * @property {number} groupSpace        The percentage of space between each group. (default: 0.05). Usually the default is fine here.\n * @property {function} y               The y-position of the bars in the group. This function is given a data value and should return\n *                                      a y-value. It should be similar to other functions you have already seen for positioning bars.\n * @property {function} height          The height of the bars in the group. This function is given a data value and should return\n *                                      a height value. It should be similar to other functions you have already seen for setting the height of bars.\n * @property {string, function} fill    A functor which gives the color for each bar (often based on the bar's group). This can be a string or a function.\n * @property {string, function} stroke  The stroke color for each bar (default: none)\n * @property {function} defined         A predicate function which can be used to determine whether a bar has a defined value. (default: true).\n *                                      Any bar for which this function returns false, meaning that it has an undefined (missing) value,\n *                                      will be displayed as a faint \"x\" in the grouped bar chart. This is in order to distinguish bars with\n *                                      missing values from bars with very small values, which would display as a very thin rectangle.\n *\n * @return {sszvis.component}\n */\n\nimport { select, scaleBand, range } from \"d3\";\n\nimport * as fn from \"../fn.js\";\nimport tooltipAnchor from \"../annotation/tooltipAnchor.js\";\nimport translateString from \"../svgUtils/translateString.js\";\nimport { component } from \"../d3-component.js\";\n\nexport default function () {\n  return component()\n    .prop(\"groupScale\")\n    .prop(\"groupSize\")\n    .prop(\"groupWidth\")\n    .prop(\"groupSpace\")\n    .groupSpace(0.05)\n    .prop(\"y\", fn.functor)\n    .prop(\"height\")\n    .prop(\"fill\")\n    .prop(\"stroke\")\n    .prop(\"defined\", fn.functor)\n    .defined(true)\n    .render(function (data) {\n      const selection = select(this);\n      const props = selection.props();\n\n      const inGroupScale = scaleBand()\n        .domain(range(props.groupSize))\n        .padding(props.groupSpace)\n        .paddingOuter(0)\n        .rangeRound([0, props.groupWidth]);\n\n      const groups = selection\n        .selectAll(\"g.sszvis-bargroup\")\n        .data(data)\n        .join(\"g\")\n        .classed(\"sszvis-bargroup\", true);\n\n      const barUnits = groups\n        .selectAll(\"g.sszvis-barunit\")\n        .data((d) => d)\n        .join(\"g\")\n        .classed(\"sszvis-barunit\", true);\n\n      barUnits.each((d, i) => {\n        // necessary for the within-group scale\n        d.__sszvisGroupedBarIndex__ = i;\n      });\n\n      const unitsWithValue = barUnits.filter(props.defined);\n\n      // clear the units before rendering\n      unitsWithValue.selectAll(\"*\").remove();\n\n      //sszsch: fix: reset previously assigned translations\n      unitsWithValue.attr(\"transform\", () => translateString(0, 0));\n\n      unitsWithValue\n        .append(\"rect\")\n        .classed(\"sszvis-bar\", true)\n        .attr(\"fill\", props.fill)\n        .attr(\n          \"x\",\n          (d) =>\n            // first term is the x-position of the group, the second term is the x-position of the bar within the group\n            props.groupScale(d) + inGroupScale(d.__sszvisGroupedBarIndex__)\n        )\n        .attr(\"y\", props.y)\n        .attr(\"width\", inGroupScale.bandwidth())\n        .attr(\"height\", props.height);\n\n      const unitsWithoutValue = barUnits.filter(fn.not(props.defined));\n\n      unitsWithoutValue.selectAll(\"*\").remove();\n\n      unitsWithoutValue.attr(\"transform\", (d, i) =>\n        translateString(\n          props.groupScale(d) +\n            inGroupScale(d.__sszvisGroupedBarIndex__) +\n            inGroupScale.bandwidth() / 2,\n          props.y(d, i)\n        )\n      );\n\n      unitsWithoutValue\n        .append(\"line\")\n        .classed(\"sszvis-bar--missing line1\", true)\n        .attr(\"x1\", -4)\n        .attr(\"y1\", -4)\n        .attr(\"x2\", 4)\n        .attr(\"y2\", 4);\n\n      unitsWithoutValue\n        .append(\"line\")\n        .classed(\"sszvis-bar--missing line2\", true)\n        .attr(\"x1\", 4)\n        .attr(\"y1\", -4)\n        .attr(\"x2\", -4)\n        .attr(\"y2\", 4);\n\n      const ta = tooltipAnchor().position((group) => {\n        let xTotal = 0;\n        let tallest = Infinity;\n        for (const [i, d] of group.entries()) {\n          xTotal +=\n            props.groupScale(d) +\n            inGroupScale(d.__sszvisGroupedBarIndex__) +\n            inGroupScale.bandwidth() / 2;\n          // smaller y is higher\n          tallest = Math.min(tallest, props.y(d, i));\n        }\n        const xAverage = xTotal / group.length;\n        return [xAverage, tallest];\n      });\n\n      selection.call(ta);\n    });\n}\n"],"names":["component","prop","groupSpace","fn","defined","render","data","selection","select","props","inGroupScale","scaleBand","domain","range","groupSize","padding","paddingOuter","rangeRound","groupWidth","groups","selectAll","join","classed","barUnits","d","each","i","__sszvisGroupedBarIndex__","unitsWithValue","filter","remove","attr","translateString","append","fill","groupScale","y","bandwidth","height","unitsWithoutValue","ta","tooltipAnchor","position","group","xTotal","tallest","Infinity","entries","Math","min","xAverage","length","call"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASe,oBAAA,IAAY;AACzB,EAAA,OAAOA,SAAS,EAAE,CACfC,IAAI,CAAC,YAAY,CAAC,CAClBA,IAAI,CAAC,WAAW,CAAC,CACjBA,IAAI,CAAC,YAAY,CAAC,CAClBA,IAAI,CAAC,YAAY,CAAC,CAClBC,UAAU,CAAC,IAAI,CAAC,CAChBD,IAAI,CAAC,GAAG,EAAEE,OAAU,CAAC,CACrBF,IAAI,CAAC,QAAQ,CAAC,CACdA,IAAI,CAAC,MAAM,CAAC,CACZA,IAAI,CAAC,QAAQ,CAAC,CACdA,IAAI,CAAC,SAAS,EAAEE,OAAU,CAAC,CAC3BC,OAAO,CAAC,IAAI,CAAC,CACbC,MAAM,CAAC,UAAUC,IAAI,EAAE;AACtB,IAAA,MAAMC,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;AAC9B,IAAA,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK,EAAE;AAE/B,IAAA,MAAMC,YAAY,GAAGC,SAAS,EAAE,CAC7BC,MAAM,CAACC,KAAK,CAACJ,KAAK,CAACK,SAAS,CAAC,CAAC,CAC9BC,OAAO,CAACN,KAAK,CAACP,UAAU,CAAC,CACzBc,YAAY,CAAC,CAAC,CAAC,CACfC,UAAU,CAAC,CAAC,CAAC,EAAER,KAAK,CAACS,UAAU,CAAC,CAAC;IAEpC,MAAMC,MAAM,GAAGZ,SAAS,CACrBa,SAAS,CAAC,mBAAmB,CAAC,CAC9Bd,IAAI,CAACA,IAAI,CAAC,CACVe,IAAI,CAAC,GAAG,CAAC,CACTC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;IAEnC,MAAMC,QAAQ,GAAGJ,MAAM,CACpBC,SAAS,CAAC,kBAAkB,CAAC,CAC7Bd,IAAI,CAAEkB,CAAC,IAAKA,CAAC,CAAC,CACdH,IAAI,CAAC,GAAG,CAAC,CACTC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC;AAElCC,IAAAA,QAAQ,CAACE,IAAI,CAAC,CAACD,CAAC,EAAEE,CAAC,KAAK;AACtB;MACAF,CAAC,CAACG,yBAAyB,GAAGD,CAAC;AACjC,IAAA,CAAC,CAAC;IAEF,MAAME,cAAc,GAAGL,QAAQ,CAACM,MAAM,CAACpB,KAAK,CAACL,OAAO,CAAC;;AAErD;IACAwB,cAAc,CAACR,SAAS,CAAC,GAAG,CAAC,CAACU,MAAM,EAAE;;AAEtC;AACAF,IAAAA,cAAc,CAACG,IAAI,CAAC,WAAW,EAAE,MAAMC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE7DJ,cAAc,CACXK,MAAM,CAAC,MAAM,CAAC,CACdX,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAC3BS,IAAI,CAAC,MAAM,EAAEtB,KAAK,CAACyB,IAAI,CAAC,CACxBH,IAAI,CACH,GAAG,EACFP,CAAC;AACA;AACAf,IAAAA,KAAK,CAAC0B,UAAU,CAACX,CAAC,CAAC,GAAGd,YAAY,CAACc,CAAC,CAACG,yBAAyB,CAClE,CAAC,CACAI,IAAI,CAAC,GAAG,EAAEtB,KAAK,CAAC2B,CAAC,CAAC,CAClBL,IAAI,CAAC,OAAO,EAAErB,YAAY,CAAC2B,SAAS,EAAE,CAAC,CACvCN,IAAI,CAAC,QAAQ,EAAEtB,KAAK,CAAC6B,MAAM,CAAC;AAE/B,IAAA,MAAMC,iBAAiB,GAAGhB,QAAQ,CAACM,MAAM,CAAC1B,GAAM,CAACM,KAAK,CAACL,OAAO,CAAC,CAAC;IAEhEmC,iBAAiB,CAACnB,SAAS,CAAC,GAAG,CAAC,CAACU,MAAM,EAAE;AAEzCS,IAAAA,iBAAiB,CAACR,IAAI,CAAC,WAAW,EAAE,CAACP,CAAC,EAAEE,CAAC,KACvCM,eAAe,CACbvB,KAAK,CAAC0B,UAAU,CAACX,CAAC,CAAC,GACjBd,YAAY,CAACc,CAAC,CAACG,yBAAyB,CAAC,GACzCjB,YAAY,CAAC2B,SAAS,EAAE,GAAG,CAAC,EAC9B5B,KAAK,CAAC2B,CAAC,CAACZ,CAAC,EAAEE,CAAC,CACd,CACF,CAAC;AAEDa,IAAAA,iBAAiB,CACdN,MAAM,CAAC,MAAM,CAAC,CACdX,OAAO,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAC1CS,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CACdA,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CACdA,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;AAEhBQ,IAAAA,iBAAiB,CACdN,MAAM,CAAC,MAAM,CAAC,CACdX,OAAO,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAC1CS,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CACdA,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CACdA,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAEhB,MAAMS,EAAE,GAAGC,aAAa,EAAE,CAACC,QAAQ,CAAEC,KAAK,IAAK;MAC7C,IAAIC,MAAM,GAAG,CAAC;MACd,IAAIC,OAAO,GAAGC,QAAQ;AACtB,MAAA,KAAK,MAAM,CAACpB,CAAC,EAAEF,CAAC,CAAC,IAAImB,KAAK,CAACI,OAAO,EAAE,EAAE;QACpCH,MAAM,IACJnC,KAAK,CAAC0B,UAAU,CAACX,CAAC,CAAC,GACnBd,YAAY,CAACc,CAAC,CAACG,yBAAyB,CAAC,GACzCjB,YAAY,CAAC2B,SAAS,EAAE,GAAG,CAAC;AAC9B;AACAQ,QAAAA,OAAO,GAAGG,IAAI,CAACC,GAAG,CAACJ,OAAO,EAAEpC,KAAK,CAAC2B,CAAC,CAACZ,CAAC,EAAEE,CAAC,CAAC,CAAC;AAC5C,MAAA;AACA,MAAA,MAAMwB,QAAQ,GAAGN,MAAM,GAAGD,KAAK,CAACQ,MAAM;AACtC,MAAA,OAAO,CAACD,QAAQ,EAAEL,OAAO,CAAC;AAC5B,IAAA,CAAC,CAAC;AAEFtC,IAAAA,SAAS,CAAC6C,IAAI,CAACZ,EAAE,CAAC;AACpB,EAAA,CAAC,CAAC;AACN;;;;"}