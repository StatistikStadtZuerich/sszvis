{"version":3,"file":"line.js","sources":["../../src/component/line.js"],"sourcesContent":["/**\n * Line component\n *\n * The line component is a general-purpose component used to render lines.\n *\n * The input data should be an array of arrays, where each inner array\n * contains the data points necessary to render a line. The line is then\n * composed of x- and y- values extracted from these data objects\n * using the x and y accessor functions.\n *\n * Each data object in a line's array is passed to the x- and y- accessors, along with\n * that data object's index in the array. For more information, see the documentation for\n * d3.line.\n *\n * In addition, the user can specify stroke and strokeWidth accessor functions. Because these\n * functions apply properties to the entire line, when called, they are give the entire array of line data\n * as an argument, plus the index of that array of line data within the outer array of lines. Note that this\n * differs slightly from the usual case in that dimension-related accessor functions are given different\n * data than style-related accessor functions.\n *\n * @module sszvis/component/line\n *\n * @property {function} x                An accessor function for getting the x-value of the line\n * @property {function} y                An accessor function for getting the y-value of the line\n * @property {function} [defined]        The key function to be used for the data join\n * @property {function} [key]            The key function to be used for the data join\n * @property {function} [valuesAccessor] An accessor function for getting the data points array of the line\n * @property {string, function} [stroke] Either a string specifying the stroke color of the line or lines,\n *                                       or a function which, when passed the entire array representing the line,\n *                                       returns a value for the stroke. If left undefined, the stroke is black.\n * @property {string, function} [strokeWidth] Either a number specifying the stroke-width of the lines,\n *                                       or a function which, when passed the entire array representing the line,\n *                                       returns a value for the stroke-width. The default value is 1.\n *\n * @return {sszvis.component}\n */\n\nimport { select, line as d3Line } from \"d3\";\n\nimport * as fn from \"../fn.js\";\nimport { defaultTransition } from \"../transition.js\";\nimport { component } from \"../d3-component.js\";\n\nexport default function () {\n  return component()\n    .prop(\"x\")\n    .prop(\"y\")\n    .prop(\"stroke\")\n    .prop(\"strokeWidth\")\n    .prop(\"defined\")\n    .prop(\"key\")\n    .key((d, i) => i)\n    .prop(\"valuesAccessor\")\n    .valuesAccessor(fn.identity)\n    .prop(\"transition\")\n    .transition(true)\n    .render(function (data) {\n      const selection = select(this);\n      const props = selection.props();\n\n      // Layouts\n\n      const line = d3Line()\n        .defined(props.defined === undefined ? fn.compose(fn.not(isNaN), props.y) : props.defined)\n        .x(props.x)\n        .y(props.y);\n\n      // Rendering\n\n      let path = selection\n        .selectAll(\".sszvis-line\")\n        .data(data, props.key)\n        .join(\"path\")\n        .classed(\"sszvis-line\", true)\n        .style(\"stroke\", props.stroke);\n\n      path.order();\n\n      if (props.transition) {\n        path = path.transition(defaultTransition());\n      }\n\n      path\n        .attr(\"d\", fn.compose(line, props.valuesAccessor))\n        .style(\"stroke\", props.stroke)\n        .style(\"stroke-width\", props.strokeWidth);\n    });\n}\n"],"names":["component","prop","key","d","i","valuesAccessor","fn","transition","render","data","selection","select","props","line","d3Line","defined","undefined","isNaN","y","x","path","selectAll","join","classed","style","stroke","order","defaultTransition","attr","strokeWidth"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQe,aAAY,IAAA;AACzB,EAAA,OAAOA,SAAS,EAAE,CACfC,IAAI,CAAC,GAAG,CAAC,CACTA,IAAI,CAAC,GAAG,CAAC,CACTA,IAAI,CAAC,QAAQ,CAAC,CACdA,IAAI,CAAC,aAAa,CAAC,CACnBA,IAAI,CAAC,SAAS,CAAC,CACfA,IAAI,CAAC,KAAK,CAAC,CACXC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAChBH,IAAI,CAAC,gBAAgB,CAAC,CACtBI,cAAc,CAACC,QAAW,CAAC,CAC3BL,IAAI,CAAC,YAAY,CAAC,CAClBM,UAAU,CAAC,IAAI,CAAC,CAChBC,MAAM,CAAC,UAAUC,IAAI,EAAE;AACtB,IAAA,MAAMC,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;AAC9B,IAAA,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK,EAAE;;AAE/B;;IAEA,MAAMC,IAAI,GAAGC,MAAM,EAAE,CAClBC,OAAO,CAACH,KAAK,CAACG,OAAO,KAAKC,SAAS,GAAGV,OAAU,CAACA,GAAM,CAACW,KAAK,CAAC,EAAEL,KAAK,CAACM,CAAC,CAAC,GAAGN,KAAK,CAACG,OAAO,CAAC,CACzFI,CAAC,CAACP,KAAK,CAACO,CAAC,CAAC,CACVD,CAAC,CAACN,KAAK,CAACM,CAAC,CAAC;;AAEb;;AAEA,IAAA,IAAIE,IAAI,GAAGV,SAAS,CACjBW,SAAS,CAAC,cAAc,CAAC,CACzBZ,IAAI,CAACA,IAAI,EAAEG,KAAK,CAACV,GAAG,CAAC,CACrBoB,IAAI,CAAC,MAAM,CAAC,CACZC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAC5BC,KAAK,CAAC,QAAQ,EAAEZ,KAAK,CAACa,MAAM,CAAC;IAEhCL,IAAI,CAACM,KAAK,EAAE;IAEZ,IAAId,KAAK,CAACL,UAAU,EAAE;MACpBa,IAAI,GAAGA,IAAI,CAACb,UAAU,CAACoB,iBAAiB,EAAE,CAAC;AAC7C;AAEAP,IAAAA,IAAI,CACDQ,IAAI,CAAC,GAAG,EAAEtB,OAAU,CAACO,IAAI,EAAED,KAAK,CAACP,cAAc,CAAC,CAAC,CACjDmB,KAAK,CAAC,QAAQ,EAAEZ,KAAK,CAACa,MAAM,CAAC,CAC7BD,KAAK,CAAC,cAAc,EAAEZ,KAAK,CAACiB,WAAW,CAAC;AAC7C,GAAC,CAAC;AACN;;;;"}