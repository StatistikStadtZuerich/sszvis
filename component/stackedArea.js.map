{"version":3,"file":"stackedArea.js","sources":["../../src/component/stackedArea.js"],"sourcesContent":["/**\n * Stacked Area component\n *\n * Stacked area charts are useful for showing how component parts contribute to a total quantity\n *\n * The stackedArea component uses a [d3 stack layout](https://github.com/mbostock/d3/wiki/Stack-Layout) under the hood,\n * so some of its configuration properties are similar. This component requires an array of layer objects,\n * where each layer object represents a layer in the stack.\n *\n * @module sszvis/component/stackedArea\n *\n * @property {function} x                      Accessor function to read *x*-values from the data. Should return a value in screen pixels.\n *                                             Used to figure out which values share a vertical position in the stack.\n * @property {function} yAccessor              Accessor function to read raw *y*-values from the data. Should return a value which is in data-units,\n *                                             not screen pixels. The results of this function are used to compute the stack, and they are then\n *                                             passed into the yScale before display.\n * @property {function} yScale                 A y-scale for determining the vertical position of data quantities. Used to compute the\n *                                             bottom and top lines of the stack.\n * @property {string, function} fill           String or accessor function for the area fill. Passed a layer object.\n * @property {string, function} stroke         String or accessor function for the area stroke. Passed a layer object.\n * @property {function} key                    Specify a key function for use in the data join. The value returned by the key should be unique\n *                                             among stacks. This option is particularly important when creating a chart which transitions\n *                                             between stacked and separated views.\n * @property {function} valuesAccessor         Specify an accessor for the values of the layer objects. The default treats the layer object\n *                                             as an array of values. Use this if your layer objects should be treated as something other than\n *                                             arrays of values.\n *\n * @return {sszvis.component}\n */\n\nimport { area, select } from \"d3\";\nimport { component } from \"../d3-component.js\";\nimport * as fn from \"../fn.js\";\nimport { defaultTransition } from \"../transition.js\";\n\nexport default function () {\n  return component()\n    .prop(\"x\")\n    .prop(\"y0\")\n    .prop(\"y1\")\n    .prop(\"fill\")\n    .prop(\"stroke\")\n    .prop(\"strokeWidth\")\n    .prop(\"defined\")\n    .prop(\"key\")\n    .key((d, i) => i)\n    .prop(\"transition\")\n    .transition(true)\n    .render(function (data) {\n      const selection = select(this);\n      const props = selection.props();\n\n      const defaultDefined = function () {\n        return fn.compose(fn.not(isNaN), props.y0) && fn.compose(fn.not(isNaN), props.y1);\n      };\n\n      const areaGen = area()\n        .defined(props.defined === undefined ? defaultDefined : props.defined)\n        .x(props.x)\n        .y0(props.y0)\n        .y1(props.y1);\n\n      let paths = selection\n        .selectAll(\"path.sszvis-path\")\n        .data(data, props.key)\n        .join(\"path\")\n        .classed(\"sszvis-path\", true);\n\n      if (props.transition) {\n        paths = paths.transition(defaultTransition());\n      }\n\n      paths\n        .attr(\"d\", areaGen)\n        .attr(\"fill\", props.fill)\n        .attr(\"stroke\", props.stroke || \"#ffffff\")\n        .attr(\"stroke-width\", props.strokeWidth === undefined ? 1 : props.strokeWidth);\n    });\n}\n"],"names":["component","prop","key","d","i","transition","render","data","selection","select","props","defaultDefined","fn","isNaN","y0","y1","areaGen","area","defined","undefined","x","paths","selectAll","join","classed","defaultTransition","attr","fill","stroke","strokeWidth"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOe,oBAAA,IAAY;AACzB,EAAA,OAAOA,SAAS,EAAE,CACfC,IAAI,CAAC,GAAG,CAAC,CACTA,IAAI,CAAC,IAAI,CAAC,CACVA,IAAI,CAAC,IAAI,CAAC,CACVA,IAAI,CAAC,MAAM,CAAC,CACZA,IAAI,CAAC,QAAQ,CAAC,CACdA,IAAI,CAAC,aAAa,CAAC,CACnBA,IAAI,CAAC,SAAS,CAAC,CACfA,IAAI,CAAC,KAAK,CAAC,CACXC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAChBH,IAAI,CAAC,YAAY,CAAC,CAClBI,UAAU,CAAC,IAAI,CAAC,CAChBC,MAAM,CAAC,UAAUC,IAAI,EAAE;AACtB,IAAA,MAAMC,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;AAC9B,IAAA,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK,EAAE;AAE/B,IAAA,MAAMC,cAAc,GAAG,YAAY;AACjC,MAAA,OAAOC,OAAU,CAACA,GAAM,CAACC,KAAK,CAAC,EAAEH,KAAK,CAACI,EAAE,CAAC,IAAIF,OAAU,CAACA,GAAM,CAACC,KAAK,CAAC,EAAEH,KAAK,CAACK,EAAE,CAAC;IACnF,CAAC;AAED,IAAA,MAAMC,OAAO,GAAGC,IAAI,EAAE,CACnBC,OAAO,CAACR,KAAK,CAACQ,OAAO,KAAKC,SAAS,GAAGR,cAAc,GAAGD,KAAK,CAACQ,OAAO,CAAC,CACrEE,CAAC,CAACV,KAAK,CAACU,CAAC,CAAC,CACVN,EAAE,CAACJ,KAAK,CAACI,EAAE,CAAC,CACZC,EAAE,CAACL,KAAK,CAACK,EAAE,CAAC;AAEf,IAAA,IAAIM,KAAK,GAAGb,SAAS,CAClBc,SAAS,CAAC,kBAAkB,CAAC,CAC7Bf,IAAI,CAACA,IAAI,EAAEG,KAAK,CAACR,GAAG,CAAC,CACrBqB,IAAI,CAAC,MAAM,CAAC,CACZC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC;IAE/B,IAAId,KAAK,CAACL,UAAU,EAAE;MACpBgB,KAAK,GAAGA,KAAK,CAAChB,UAAU,CAACoB,iBAAiB,EAAE,CAAC;AAC/C,IAAA;AAEAJ,IAAAA,KAAK,CACFK,IAAI,CAAC,GAAG,EAAEV,OAAO,CAAC,CAClBU,IAAI,CAAC,MAAM,EAAEhB,KAAK,CAACiB,IAAI,CAAC,CACxBD,IAAI,CAAC,QAAQ,EAAEhB,KAAK,CAACkB,MAAM,IAAI,SAAS,CAAC,CACzCF,IAAI,CAAC,cAAc,EAAEhB,KAAK,CAACmB,WAAW,KAAKV,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACmB,WAAW,CAAC;AAClF,EAAA,CAAC,CAAC;AACN;;;;"}