{"version":3,"file":"choropleth.js","sources":["../../src/maps/choropleth.js"],"sourcesContent":["import { select, dispatch } from \"d3\";\nimport { component } from \"../d3-component.js\";\nimport {\n  GEO_KEY_DEFAULT,\n  mapRendererBase,\n  mapRendererHighlight,\n  mapRendererMesh,\n  mapRendererPatternedLakeOverlay,\n  prepareMergedGeoData,\n  swissMapPath,\n} from \"../map/index.js\";\n\n/**\n * zurichStadtKreise Map Component\n *\n * To use this component, pass data in the usual manner. Each data object is expected to have a value which\n * will be used to match that object with a particular map entity. The possible id values depend on the map type.\n * They are covered in more detail in the file sszvis/map/map-ids.txt. Which data key is used to fetch this value is configurable.\n * The default key which map.js expects is 'geoId', but by changing the keyName property of the map, you can pass data which\n * use any key. The map component assumes that datum[keyName] is a valid map ID which is matched with the available map entities.\n *\n * @property {Number} width                           The width of the map. Used to create the map projection function\n * @property {Number} height                          The height of the map. Used to create the map projection function\n * @property {String} keyName                         The data object key which will return a map entity id. Default 'geoId'.\n * @property {Array} highlight                        An array of data elements to highlight. The corresponding map entities are highlighted.\n * @property {String, Function} highlightStroke       A function for the stroke of the highlighted entities\n * @property {Boolean, Function} defined              A predicate function used to determine whether a datum has a defined value.\n *                                                    Map entities with data values that fail this predicate test will display the missing value texture.\n * @property {String, Function} fill                  A string or function for the fill of the map entities\n * @property {String} borderColor                     A string for the border color of the map entities\n * @property {Boolean} withLake                       Whether or not to show the textured outline of the end of lake Zurich that is within the city. Default true\n * @property {Component} anchoredShape                A shape to anchor to the base map elements of this map. For example, anchoredCircles for a bubble map.\n * @property {Boolean} transitionColor                Whether or not to transition the color of the base shapes. Default true.\n * @function on(String, function)                     This component has an event handler interface for binding events to the map entities.\n *                                                    The available events are 'over', 'out', and 'click'. These are triggered on map\n *                                                    elements when the user mouses over or taps, mouses out, or taps or clicks, respectively.\n *\n * @return {d3.component}\n */\n\nexport default function () {\n  const event = dispatch(\"over\", \"out\", \"click\");\n\n  const baseRenderer = mapRendererBase();\n  const meshRenderer = mapRendererMesh();\n  const lakeRenderer = mapRendererPatternedLakeOverlay();\n  const highlightRenderer = mapRendererHighlight();\n\n  const mapComponent = component()\n    .prop(\"width\")\n    .prop(\"height\")\n    .prop(\"keyName\")\n    .keyName(GEO_KEY_DEFAULT)\n    .prop(\"withLake\")\n    .withLake(true)\n    .prop(\"anchoredShape\")\n    .prop(\"features\")\n    .prop(\"borders\")\n    .prop(\"lakeFeatures\")\n    .prop(\"lakeBorders\")\n    .prop(\"lakeFadeOut\")\n    .lakeFadeOut(false)\n    .delegate(\"defined\", baseRenderer)\n    .delegate(\"fill\", baseRenderer)\n    .delegate(\"transitionColor\", baseRenderer)\n    .delegate(\"borderColor\", meshRenderer)\n    .delegate(\"strokeWidth\", meshRenderer)\n    .delegate(\"highlight\", highlightRenderer)\n    .delegate(\"highlightStroke\", highlightRenderer)\n    .delegate(\"highlightStrokeWidth\", highlightRenderer)\n    .delegate(\"lakePathColor\", lakeRenderer)\n    .render(function (data) {\n      const selection = select(this);\n      const props = selection.props();\n\n      // create a map path generator function\n      const mapPath = swissMapPath(\n        props.width,\n        props.height,\n        props.features,\n        \"zurichStadtfeatures\"\n      );\n\n      const mergedData = prepareMergedGeoData(data, props.features, props.keyName);\n\n      // Base shape\n      baseRenderer.geoJson(props.features).mergedData(mergedData).mapPath(mapPath);\n\n      // Border mesh\n      meshRenderer.geoJson(props.borders).mapPath(mapPath);\n\n      // Lake Zurich shape\n      lakeRenderer\n        .lakeFeature(props.lakeFeatures)\n        .lakeBounds(props.lakeBorders)\n        .mapPath(mapPath)\n        .fadeOut(props.lakeFadeOut);\n\n      // Highlight mesh\n      highlightRenderer.geoJson(props.features).keyName(props.keyName).mapPath(mapPath);\n\n      // Rendering\n\n      selection.call(baseRenderer).call(meshRenderer);\n\n      if (props.withLake) {\n        selection.call(lakeRenderer);\n      }\n\n      selection.call(highlightRenderer);\n\n      if (props.anchoredShape) {\n        props.anchoredShape.mergedData(mergedData).mapPath(mapPath);\n\n        selection.call(props.anchoredShape);\n      }\n\n      // Event Binding\n\n      selection\n        .selectAll(\"[data-event-target]\")\n        .on(\"mouseover\", function (d) {\n          event.call(\"over\", this, d.datum);\n        })\n        .on(\"mouseout\", function (d) {\n          event.call(\"out\", this, d.datum);\n        })\n        .on(\"click\", function (d) {\n          event.call(\"click\", this, d.datum);\n        });\n    });\n\n  mapComponent.on = function () {\n    const value = event.on.apply(event, arguments);\n    return value === event ? mapComponent : value;\n  };\n\n  return mapComponent;\n}\n"],"names":["event","dispatch","baseRenderer","mapRendererBase","meshRenderer","mapRendererMesh","lakeRenderer","mapRendererPatternedLakeOverlay","highlightRenderer","mapRendererHighlight","mapComponent","component","prop","keyName","GEO_KEY_DEFAULT","withLake","lakeFadeOut","delegate","render","data","selection","select","props","mapPath","swissMapPath","width","height","features","mergedData","prepareMergedGeoData","geoJson","borders","lakeFeature","lakeFeatures","lakeBounds","lakeBorders","fadeOut","call","anchoredShape","selectAll","on","d","datum","value","apply","arguments"],"mappings":"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"}