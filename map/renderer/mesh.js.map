{"version":3,"file":"mesh.js","sources":["../../../src/map/renderer/mesh.js"],"sourcesContent":["/**\n * mesh renderer component\n *\n * @module sszvis/map/renderer/mesh\n *\n * A component used internally for rendering the borders of all map entities as a single mesh.\n * This component expects a GeoJson object which is a single polyline for the entire mesh of all borders.\n * All borders will therefore be rendered as one continuous object, which is faster, more memory-efficient,\n * and prevents overlapping borders from creating strange rendering effects. The downside is that the entire\n * line must have a single set of styles which all borders share. To highlight individual borders, use the highlight renderer.\n *\n * @property {GeoJson} geoJson                        The GeoJson object to be rendered by this map layer.\n * @property {d3.geo.path} mapPath                    A path-generator function used to create the path data string of the provided GeoJson.\n * @property {string, function} borderColor           The color of the border path stroke. Default is white\n *\n * @return {sszvis.component}\n */\n\nimport { select } from \"d3\";\nimport { component } from \"../../d3-component.js\";\n\nexport default function () {\n  return component()\n    .prop(\"geoJson\")\n    .prop(\"mapPath\")\n    .prop(\"borderColor\")\n    .borderColor(\"white\") // A function or string for the color of all borders. Note: all borders have the same color\n    .prop(\"strokeWidth\")\n    .strokeWidth(1.25)\n    .render(function () {\n      const selection = select(this);\n      const props = selection.props();\n\n      // add the map borders. These are rendered as one single path element\n      const meshLine = selection\n        .selectAll(\".sszvis-map__border\")\n        .data([props.geoJson])\n        .join(\"path\")\n        .classed(\"sszvis-map__border\", true);\n\n      meshLine\n        .attr(\"d\", props.mapPath)\n        .style(\"stroke\", props.borderColor)\n        .style(\"stroke-width\", props.strokeWidth);\n    });\n}\n"],"names":["component","prop","borderColor","strokeWidth","render","selection","select","props","meshLine","selectAll","data","geoJson","join","classed","attr","mapPath","style"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKe,wBAAA,IAAY;EACzB,OAAOA,SAAS,EAAE,CACfC,IAAI,CAAC,SAAS,CAAC,CACfA,IAAI,CAAC,SAAS,CAAC,CACfA,IAAI,CAAC,aAAa,CAAC,CACnBC,WAAW,CAAC,OAAO,CAAC;AAAC,GACrBD,IAAI,CAAC,aAAa,CAAC,CACnBE,WAAW,CAAC,IAAI,CAAC,CACjBC,MAAM,CAAC,YAAY;AAClB,IAAA,MAAMC,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;AAC9B,IAAA,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK,EAAE;;AAE/B;AACA,IAAA,MAAMC,QAAQ,GAAGH,SAAS,CACvBI,SAAS,CAAC,qBAAqB,CAAC,CAChCC,IAAI,CAAC,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,CACrBC,IAAI,CAAC,MAAM,CAAC,CACZC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC;IAEtCL,QAAQ,CACLM,IAAI,CAAC,GAAG,EAAEP,KAAK,CAACQ,OAAO,CAAC,CACxBC,KAAK,CAAC,QAAQ,EAAET,KAAK,CAACL,WAAW,CAAC,CAClCc,KAAK,CAAC,cAAc,EAAET,KAAK,CAACJ,WAAW,CAAC;AAC7C,EAAA,CAAC,CAAC;AACN;;;;"}