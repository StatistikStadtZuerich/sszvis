{"version":3,"file":"util.js","sources":["../../src/behavior/util.js"],"sourcesContent":["/**\n * Behavior utilities\n *\n * These utilities are intended for internal usage by the sszvis.behavior components.\n * They aren't intended for use in example code, but should be in a separate module\n * because they are accessed by several different behavior components.\n *\n * @function {Event} elementFromEvent             Accepts an event, and returns the element, if any,\n *                                                which is in the document under that event. Uses\n *                                                document.elementFromPoint to determine the element.\n *                                                If there is no such element, or the event is invalid,\n *                                                this function will return null.\n * @function {Element} datumFromPannableElement   Accepts an element, determines if it's \"pannable\",\n *                                                and returns the datum, if any, attached to this element.\n *                                                This is determined by the presence of the data-sszvis-behavior-pannable\n *                                                attribute on the element. Behaviors which use \"panning\" behavior\n *                                                will attach this attribute to the elements they target.\n *                                                Elements which have panning behaviors attached to them\n *                                                will get this attribute assigned to them. If the element doesn't\n *                                                have this attriute, or doesn't have a datum assigned, this funciton\n *                                                returns null.\n * @function {Event} datumFromPanEvent            A combination of elementFromEvent and datumFromPannableElement, which\n *                                                accepts an event and returns the datum attached to the element under\n *                                                that event, if such an element and such a datum exists.\n * @function {Number, Object, Function, Number} testBarThreshold        This function is a convenience function for encapsulating\n *                                                                      the test which should be performed on a touch interaction,\n *                                                                      to see whether the touch falls within the \"profile\" of a bar\n *                                                                      chart. If so, that is, if the test passes, then scrolling should\n *                                                                      be prevented on the bar charts, and a tooltip should be shown.\n *                                                                      This is the behavior known as \"panning\" over the surface of the chart,\n *                                                                      while on a mobile device. The function returns true if the touch is\n *                                                                      considered to be within the \"profile\" of the bar chart, and false otherwise.\n *                                                                      The function takes four arguments:\n *                                                                        cursorValue - This the value, specified in the same units as the original\n *                                                                                      data, at the touch event's position. This value is\n *                                                                                      automatically calculated by the 'move' behavior,\n *                                                                                      by inverting the scale used for the bar charts' extent.\n *                                                                        datum -       This is the data value at the touch event's position,\n *                                                                                      against which you are comparing the profile. Since data\n *                                                                                      values all live in user-land, you should retrieve this\n *                                                                                      datum yourself. Usually this can be done by using the\n *                                                                                      inverted value from the other axis of the bar chart,\n *                                                                                      and searching the data for the datum which matches that\n *                                                                                      value. However, note that the datum argument can be\n *                                                                                      undefined, in which case the touch is considered invalid and\n *                                                                                      the test will return false.\n *                                                                        accessor -    This is an accessor function for retrieving a numeric value\n *                                                                                      from the datum. This function should be used to retrieve out\n *                                                                                      of the datum the value against which cursorValue is compared.\n *                                                                        threshold -   A small threshold, specified in datum units, i.e. in the units\n *                                                                                      of the domain (NOT the range) of the scale function. When a bar\n *                                                                                      value is very small, or 0, or NaN, it would be impossible to have\n *                                                                                      a touch which is over the \"profile\" of this bar. So in those cases,\n *                                                                                      we consider the touch to be within the profile if it and the data\n *                                                                                      value are under this threshold. This number should be some small\n *                                                                                      number in the data's domain, and will be compared against both\n *                                                                                      cursorValue and the value accessed from the datum.\n */\n\nimport { select } from \"d3\";\n\nimport * as fn from \"../fn.js\";\n\nexport const elementFromEvent = function (evt) {\n  if (!fn.isNull(evt) && fn.defined(evt)) {\n    return document.elementFromPoint(evt.clientX, evt.clientY);\n  }\n  return null;\n};\n\nexport const datumFromPannableElement = function (element) {\n  if (!fn.isNull(element)) {\n    const selection = select(element);\n    if (!fn.isNull(selection.attr(\"data-sszvis-behavior-pannable\"))) {\n      const datum = selection.datum();\n      if (fn.defined(datum)) {\n        return datum;\n      }\n    }\n  }\n  return null;\n};\n\nexport const datumFromPanEvent = function (evt) {\n  return datumFromPannableElement(elementFromEvent(evt));\n};\n\nexport const testBarThreshold = function (cursorValue, datum, accessor, threshold) {\n  if (!fn.defined(datum)) {\n    return false;\n  }\n  const dataValue = accessor(datum);\n  // For bars that are very small, or have a NaN value, then\n  // when the touch is close enough to the 0-axis, we prevent scrolling\n  // and show the tooltip. The proximity which the touch must have to the 0-axis\n  // is determined by threshold, which must be a value in the axis' domain (NOT range).\n  return (\n    (cursorValue < threshold && isNaN(dataValue)) ||\n    (cursorValue < threshold && dataValue < threshold) ||\n    cursorValue < dataValue\n  );\n};\n"],"names":["elementFromEvent","evt","fn","document","elementFromPoint","clientX","clientY","datumFromPannableElement","element","selection","select","attr","datum","datumFromPanEvent","testBarThreshold","cursorValue","accessor","threshold","dataValue","isNaN"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAMaA,gBAAgB,GAAG,UAAUC,GAAG,EAAE;AAC7C,EAAA,IAAI,CAACC,MAAS,CAACD,GAAG,CAAC,IAAIC,OAAU,CAACD,GAAG,CAAC,EAAE;IACtC,OAAOE,QAAQ,CAACC,gBAAgB,CAACH,GAAG,CAACI,OAAO,EAAEJ,GAAG,CAACK,OAAO,CAAC;AAC5D,EAAA;AACA,EAAA,OAAO,IAAI;AACb;MAEaC,wBAAwB,GAAG,UAAUC,OAAO,EAAE;AACzD,EAAA,IAAI,CAACN,MAAS,CAACM,OAAO,CAAC,EAAE;AACvB,IAAA,MAAMC,SAAS,GAAGC,MAAM,CAACF,OAAO,CAAC;AACjC,IAAA,IAAI,CAACN,MAAS,CAACO,SAAS,CAACE,IAAI,CAAC,+BAA+B,CAAC,CAAC,EAAE;AAC/D,MAAA,MAAMC,KAAK,GAAGH,SAAS,CAACG,KAAK,EAAE;AAC/B,MAAA,IAAIV,OAAU,CAACU,KAAK,CAAC,EAAE;AACrB,QAAA,OAAOA,KAAK;AACd,MAAA;AACF,IAAA;AACF,EAAA;AACA,EAAA,OAAO,IAAI;AACb;MAEaC,iBAAiB,GAAG,UAAUZ,GAAG,EAAE;AAC9C,EAAA,OAAOM,wBAAwB,CAACP,gBAAgB,CAACC,GAAG,CAAC,CAAC;AACxD;AAEO,MAAMa,gBAAgB,GAAG,UAAUC,WAAW,EAAEH,KAAK,EAAEI,QAAQ,EAAEC,SAAS,EAAE;AACjF,EAAA,IAAI,CAACf,OAAU,CAACU,KAAK,CAAC,EAAE;AACtB,IAAA,OAAO,KAAK;AACd,EAAA;AACA,EAAA,MAAMM,SAAS,GAAGF,QAAQ,CAACJ,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA,EAAA,OACGG,WAAW,GAAGE,SAAS,IAAIE,KAAK,CAACD,SAAS,CAAC,IAC3CH,WAAW,GAAGE,SAAS,IAAIC,SAAS,GAAGD,SAAU,IAClDF,WAAW,GAAGG,SAAS;AAE3B;;;;"}