Notes on updating the map data:

The map data encapsulated in the zurich map modules comes from SSZ GeoJSON posted on data.stadt-zuerich.ch. The data for Swiss cantons comes from an Interactive Things open-source project. All geo data is stored in the TopoJSON format (https://github.com/mbostock/topojson). TopoJSON has several advantages, including a much smaller file size, which enables quicker transmission to the client, and the ability to calculate an optimized mesh of geographic borders, which improves the display performance of the complex layered maps generated by this library. Whereas GeoJSON encodes the coordinates of each point in a map vector, including duplicate points wherever two map shapes have the same border, TopoJSON works by encoding only the border lines, plus information to determine which map entities are associated with which borders. In order to be displayed in a map, TopoJSON objects must be converted to valid GeoJSON in memory. This step requires the client to load the compact topojson.js, but compared to the network overhead (and, where applicable, the data volume requirement) of loading a significantly larger GeoJSON file, this is a relatively efficient process. The in-memory GeoJSON is compiled when the map component is first used.

Updating the map data used in sszvis.js requires several steps. First, the new map data must be prepared. The geodata/ folder contains all the geo data files necessary for sszvis.js. To view these GeoJSON files, you can use the excellent GeoJSON.io (http://geojson.io/). Here is a summary of the folder contents:

*geodata/*
    *ch_cantons_topo.json* - this is a TopoJSON file containing data for the cantons of Switzerland. It is from the Interactive Things open source project Swiss Maps: https://github.com/interactivethings/swiss-maps/. This document will not discuss updating this file. Please see the github page for more information on this file. The TopoJSON in the the switzerland.js module is a direct copy of this file.
    *stadtkreis.topojson* - this is a TopoJSON file containing data for the stadtkreis of Zurich, plus the outline of the portion of Lake Zurich included in sszvis.js maps and the sections of the boundaries of the stadkreis which are rendered as dotted lines over the outline of Lake Zurich. (For implementation reasons, these sections are kept as separate objects, distinct from the objects which represent city-wide boundaries).
    *wahlkreis.topojson* - the wahlkreis data
    *statistische_quartiere.topojson* - the statistische quartiere data
    *stadtkreis.geojson* - this file includes GeoJSON data for the stadtkreis shapes.
    *wahlkreis.geojson* - this file includes GeoJSON data for the wahlkreis shapes.
    *statistische_quartiere.geojson* - this file includes GeoJSON data for the statistische quartiere shapes.
    *centers.csv* - A data file that gives the correct visual centers of certain map entities. More information below.
    *lakezurich.geojson* - this file contains GeoJSON data for the outline of Lake Zurich.
    *seebounds/* - these files contains boundary lines that lie over Lake Zurich, and are used to render those boundaries as grey dotted lines.
        *stadtkreis_lakebounds.geojson* - this file contains the section of the stadtkreis boundaries which lie over lake zurich.
        *wahlkreis_lakebounds.geojson* - this file contains the section of the wahlkreis boundaries which lie over lake zurich.
        *statistische_quartiere_lakebounds.geojson* - this file contains the section of the statistische quartiere boundaries which lie over lake zurich.
    *withoutsee/* - This folder contains GeoJSON shapes for the three types of division, but without the area of Lake Zurich. In other words, lakeside entity boundaries end at the border of Lake Zurich, rather than at their official edges. These files are not used in sszvis.js at the moment, but are included to facilitate possible future maps of Zurich which require boundaries that exclude Lake Zurich.
        *stadtkreis.geojson* - stadtkreis without Lake Zurich
        *wahlkreis.geojson* - wahlkreis without Lake Zurich
        *statistische_quartiere.geojson* - statistische_quartiere without Lake Zurich

Generating Zurich-area TopoJSON:

These files are generated using the topojson.js command-line interface described in the TopoJSON documentation. The commands for the generation of these files are encapsulated in rules in the Makefile. The Make targets depend on access to a global 'topojson' command, which can be installed by following instructions in the TopoJSON documentation, as well as of course a working version of Make. It has only been tested using the Mac OS X developer tools version of Make, GNU Make 3.81. To rebuild the three TopoJSON files as-is, run '$ make clean' to remove the generated files, then run '$ make maps' to re-create the files from their sources. If any of the source map data is changed or updated, those changes should be reflected in the new files.

Note on the "center" property:

To compute positions for the map tooltips, sszvis.js finds the point in the middle of the boundary of each shape. However, for some shapes the resulting location is strange. For example, the "center" of the crescent-shaped Hochschulen quarter actually falls somewhere near the boundary. This is a problem with four quartiere in the statistische_quartiere GeoJSON file (Hirslanden, Seefeld, Hottingen, and Hochschulen). To get around this problem, a special "center" property is added to the data. If the property is present on a data object, sszvis.js will use it as the center point instead of the automatically-computed centroid. The center property should be specified as a string of the form "longitude,latitude". The location of the center was hand-chosen, and it is not one of the properties from the original source data. It is merged onto the source data by the topojson.js tool, based on the QNr property. To add new custom centers, add the QNr and the center to the end of centers.csv. Be sure to use quotes around the center string, since it contains a comma! (like "lat,lon").

Copying new TopoJSON into existing sszvis.js map modules:

When the source GeoJSON files have been updated, and the TopoJSON has been re-generated, you must copy the raw data into the map modules. To update the data, copy and paste the TopoJSON directly into the map modules as the value of the rawTopo variable. The TopoJSON is a valid Javascript object literal.

Creating new map modules:

To create a new map module, follow the patterns established by the existing modules. The new module should include the raw TopoJSON or GeoJSON inline. Modules use renderers to create different layers. Currently, there are four renderers, which are quite flexible, but it's certainly possible to create new renderers to acheive a particular style or render an object with different behavior.
