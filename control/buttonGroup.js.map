{"version":3,"file":"buttonGroup.js","sources":["../../src/control/buttonGroup.js"],"sourcesContent":["/**\n * Button Group control\n *\n * Control for switching top-level filter values. Use this control for changing between several\n * options which affect the state of the chart. This component should be rendered into an html layer.\n *\n * This control is part of the `optionSelectable` class of controls and can be used interchangeably\n * with other controls of this class (sszvis.control.select).\n *\n * @module sszvis/control/buttonGroup\n *\n * @property {array} values         an array of values which are the options available in the control. Each one will become a button\n * @property {any} current          the current value of the button group. Should be one of the options passed to .values()\n * @property {number} width         The total width of the button group. Each option will have 1/3rd of this width. (default: 300px)\n * @property {function} change      A callback/event handler function to call when the user clicks on a value.\n *                                  Note that clicking on a value does not necessarily change any state unless this callback function does something.\n *\n * @return {sszvis.component}\n */\n\nimport { select } from \"d3\";\nimport { component } from \"../d3-component.js\";\nimport * as fn from \"../fn.js\";\n\nexport default function () {\n  return component()\n    .prop(\"values\")\n    .prop(\"current\")\n    .prop(\"width\")\n    .width(300)\n    .prop(\"change\")\n    .change(fn.identity)\n    .render(function () {\n      const selection = select(this);\n      const props = selection.props();\n\n      const buttonWidth = props.width / props.values.length;\n\n      const container = selection\n        .selectAll(\".sszvis-control-optionSelectable\")\n        .data([\"sszvis-control-buttonGroup\"], (d) => d)\n        .join(\"div\")\n        .classed(\"sszvis-control-optionSelectable\", true)\n        .classed(\"sszvis-control-buttonGroup\", true);\n\n      container.style(\"width\", props.width + \"px\");\n\n      const buttons = container\n        .selectAll(\".sszvis-control-buttonGroup__item\")\n        .data(props.values)\n        .join(\"div\")\n        .classed(\"sszvis-control-buttonGroup__item\", true);\n\n      buttons\n        .style(\"width\", buttonWidth + \"px\")\n        .classed(\"selected\", (d) => d === props.current)\n        .text((d) => d)\n        .on(\"click\", props.change);\n    });\n}\n"],"names":["component","prop","width","change","fn","render","selection","select","props","buttonWidth","values","length","container","selectAll","data","d","join","classed","style","buttons","current","text","on"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMe,oBAAA,IAAY;AACzB,EAAA,OAAOA,SAAS,EAAE,CACfC,IAAI,CAAC,QAAQ,CAAC,CACdA,IAAI,CAAC,SAAS,CAAC,CACfA,IAAI,CAAC,OAAO,CAAC,CACbC,KAAK,CAAC,GAAG,CAAC,CACVD,IAAI,CAAC,QAAQ,CAAC,CACdE,MAAM,CAACC,QAAW,CAAC,CACnBC,MAAM,CAAC,YAAY;AAClB,IAAA,MAAMC,SAAS,GAAGC,MAAM,CAAC,IAAI,CAAC;AAC9B,IAAA,MAAMC,KAAK,GAAGF,SAAS,CAACE,KAAK,EAAE;IAE/B,MAAMC,WAAW,GAAGD,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACE,MAAM,CAACC,MAAM;AAErD,IAAA,MAAMC,SAAS,GAAGN,SAAS,CACxBO,SAAS,CAAC,kCAAkC,CAAC,CAC7CC,IAAI,CAAC,CAAC,4BAA4B,CAAC,EAAGC,CAAC,IAAKA,CAAC,CAAC,CAC9CC,IAAI,CAAC,KAAK,CAAC,CACXC,OAAO,CAAC,iCAAiC,EAAE,IAAI,CAAC,CAChDA,OAAO,CAAC,4BAA4B,EAAE,IAAI,CAAC;IAE9CL,SAAS,CAACM,KAAK,CAAC,OAAO,EAAEV,KAAK,CAACN,KAAK,GAAG,IAAI,CAAC;IAE5C,MAAMiB,OAAO,GAAGP,SAAS,CACtBC,SAAS,CAAC,mCAAmC,CAAC,CAC9CC,IAAI,CAACN,KAAK,CAACE,MAAM,CAAC,CAClBM,IAAI,CAAC,KAAK,CAAC,CACXC,OAAO,CAAC,kCAAkC,EAAE,IAAI,CAAC;AAEpDE,IAAAA,OAAO,CACJD,KAAK,CAAC,OAAO,EAAET,WAAW,GAAG,IAAI,CAAC,CAClCQ,OAAO,CAAC,UAAU,EAAGF,CAAC,IAAKA,CAAC,KAAKP,KAAK,CAACY,OAAO,CAAC,CAC/CC,IAAI,CAAEN,CAAC,IAAKA,CAAC,CAAC,CACdO,EAAE,CAAC,OAAO,EAAEd,KAAK,CAACL,MAAM,CAAC;AAC9B,EAAA,CAAC,CAAC;AACN;;;;"}