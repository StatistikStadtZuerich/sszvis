{"version":3,"file":"logger.js","sources":["../src/logger.js"],"sourcesContent":["/**\n *\n * @module sszvis/logger\n *\n * A component for logging development messages and errors\n *\n * This is a custom logger which accomplishes two goals: 1) to clearly identify log messages\n * coming from sszvis, and 2) to smooth out cross-browser inconsistencies in the implementation\n * of various console functions.\n *\n * All log messages should be visible in the developer tools Javascript console for your web browser\n * of choice. For more information on how to access browser developer tools, see the browser documentation.\n *\n * The logger provides three log levels. All logging functions can accept any number of arguments of\n * any type.\n *\n * Examples:\n *\n * Logging general information:\n *\n * sszvis.logger.log('Circle coordinates: ', circle.cx, circle.cy, circle.r);\n *\n * Logging a warning:\n *\n * sszvis.logger.warn('Configuration options are incompatible: ', props.config1(), props.config2());\n *\n * Logging an error:\n *\n * sszvis.logger.error('Component X requires the \"abc\" property');\n *\n * @method {any...} log        The basic log level, used for informational purposes\n * @method {any...} warn       Logs a warning, which identifies a potential, but not critical problem\n *                             or informs the user about certain implementation issues which may or\n *                             may not require user attention.\n * @method {any...} error      Logs an error. This should be used when something has gone wrong in the\n *                             implementation, or when the API is used in an unsupported manner. An\n *                             error logged in this way is different from an uncaught exception, in that\n *                             it does not force an unexpected termination of code execution. Instead,\n *                             when errors are logged, it is because of a known, and noticed issue, and\n *                             the error message should provide some information towards resolving the\n *                             problem, usually by changing the use of the library. The implementation\n *                             will handle the situation gracefully, and not cause an unexpected termination\n *                             of execution.\n */\n\nexport const log = logger(\"log\");\nexport const warn = logger(\"warn\");\nexport const error = logger(\"error\");\n\n/* Helper functions\n----------------------------------------------- */\nfunction logger(type) {\n  return () => {\n    if (console && console[type]) {\n      for (const msg of slice(arguments)) {\n        console[type](msg);\n      }\n    }\n  };\n}\n\nfunction slice(array) {\n  return Array.prototype.slice.call(array);\n}\n"],"names":["log","logger","warn","error","type","console","msg","slice","arguments","array","Array","prototype","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEaA,GAAG,GAAGC,MAAM,CAAC,KAAK;MAClBC,IAAI,GAAGD,MAAM,CAAC,MAAM;MACpBE,KAAK,GAAGF,MAAM,CAAC,OAAO;;AAEnC;AACA;AACA,SAASA,MAAMA,CAACG,IAAI,EAAE;AACpB,EAAA,OAAO,MAAM;AACX,IAAA,IAAIC,OAAO,IAAIA,OAAO,CAACD,IAAI,CAAC,EAAE;AAC5B,MAAA,KAAK,MAAME,GAAG,IAAIC,KAAK,CAACC,SAAS,CAAC,EAAE;AAClCH,QAAAA,OAAO,CAACD,IAAI,CAAC,CAACE,GAAG,CAAC;AACpB,MAAA;AACF,IAAA;EACF,CAAC;AACH;AAEA,SAASC,KAAKA,CAACE,KAAK,EAAE;EACpB,OAAOC,KAAK,CAACC,SAAS,CAACJ,KAAK,CAACK,IAAI,CAACH,KAAK,CAAC;AAC1C;;;;"}